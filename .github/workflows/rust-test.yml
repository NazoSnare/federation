name: Rust Lint and Tests

on:
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  check_format_and_lint:
    continue-on-error: true # we want to show this check failure in GH but to not prevent building.
    name: Check formatting (rustfmt) and lint with Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      ### INSTALL RUST ###
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: nightly
          profile: minimal
          components: rustfmt, clippy

      ## INSTALL NODE AND NPM
      - name: Install Node and npm
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      ### BUILD CACHE ###
      - name: Cache Cargo registry, target, index
        uses: actions/cache@v2
        id: cache-cargo
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/bin
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache npm
        uses: actions/cache@v2
        id: cache-node-modules
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ matrix.build }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.build }}-${{ env.cache-name }}-
            ${{ matrix.build }}-

      - name: Install npm dependencies
        run: npm install

      ### FORMATTING AND STYLE ###
      - name: Check formatting
        run: cargo fmt -- --check

      - name: Check Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      # Intentionally 1x1 matrix right now to enable easy fan-out
      # in the future, but also to model what is in rust-slow-test.
      matrix:
        build: [linux]
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      ### INSTALL RUST ###
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      ## INSTALL NODE AND NPM
      - name: Install Node and npm
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      ### BUILD CACHE ###
      - name: Cache Cargo registry, target, index
        uses: actions/cache@v2
        id: cache-cargo
        env:
          cache-name: cache-cargo
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/bin
            ~/.cargo/git
            target
          key: ${{ matrix.build }}-${{ steps.toolchain.outputs.rustc_hash }}-rust-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache npm
        uses: actions/cache@v2
        id: cache-node-modules
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ matrix.build }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ matrix.build }}-${{ env.cache-name }}-
            ${{ matrix.build }}-

      # Install wasm-pack
      - name: Install wasm-pack
        shell: bash
        run: which wasm-pack || curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Install npm dependencies
        run: npm install

      ### RUN TESTS ###
      - name: Test (cargo test)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: "--workspace --locked -- --nocapture"
        env:
          RUST_LOG: debug
          RUST_BACKTRACE: 1
      - name: Test (wasm-pack test --node)
        working-directory: query-planner-wasm
        run: wasm-pack test --node
